{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"yKAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCRpCI,EAAU,aA4BD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC6D5BK,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACNP,EAASO,QAEV,IAEH,IAsCMC,EAAcL,EAClBJ,EACAA,EAAMU,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAE5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMsB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAAjC,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAvCH,SAAAU,GACzB,IAAMX,EAAOsB,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD0B,EACQlB,EAAIyB,GACTvB,MAAK,SAAAwB,GACNd,EAASD,EAAMW,KAAI,SAAAjC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOqC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUxC,EAAKI,QADf,sCAGLmB,EAASD,EAAMU,QAAO,SAAAG,GAAC,OAAIA,EAAExB,KAAOA,SA0BJ8B,CAAmBzC,EAAKW,MAF3CX,EAAKW,SAMlB,uBAAM+B,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASoB,EACTZ,MAAM,IAAIkC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAG7BpB,EACUgB,GACLhC,MAAK,SAAAwB,GACNd,EAASD,EAAMN,OAAOqB,IACtBZ,EAAW,QA+Cb,UACE,uBACEyB,MAAO1B,EACP2B,SA7BiB,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzBzB,EAAWkB,EAAMW,OAAOJ,UA6BpB,wBAAQK,KAAK,SAAb,yBC9ERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.421cca82.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll2 = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, create, update\r\n}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note\n              key={note.id}\n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}